import { mapHelper } from '@battletris/shared';

/**
 * Transforms a number into a block map and returns this one.
 *
 * @param      {number}  number  number to transform
 */
export default function(number) {
  if (number > 9) {
    throw new Error('number exceeds the limit of 9...');
  }

  // set maps for number
  let map;
  switch (number) {
    case 0: {
      map = [
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, ],
        [ 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, ],
        [ 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, ],
        [ 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, ],
        [ 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
      ];

      break;
    }
    case 1: {
      map = [
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, ],
        [ 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, ],
        [ 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, ],
        [ 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, ],
        [ 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
      ];

      break;
    }
    case 2: {
      map = [
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, ],
        [ 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, ],
        [ 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
      ];

      break;
    }
    case 3: {
      map = [
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, ],
        [ 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, ],
        [ 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, ],
        [ 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
      ];

      break;
    }
    case 4: {
      map = [
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, ],
        [ 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, ],
        [ 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
      ];

      break;
    }
    case 5: {
      map = [
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, ],
        [ 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, ],
        [ 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
      ];

      break;
    }
    case 6: {
      map = [
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, ],
        [ 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, ],
        [ 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, ],
        [ 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, ],
        [ 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
      ];

      break;
    }
    case 7: {
      map = [
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, ],
        [ 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, ],
        [ 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, ],
        [ 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, ],
        [ 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
      ];

      break;
    }
    case 8: {
      map = [
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, ],
        [ 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, ],
        [ 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, ],
        [ 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, ],
        [ 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
      ];

      break;
    }
    case 9: {
      map = [
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, ],
        [ 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, ],
        [ 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, ],
        [ 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, ],
        [ 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
      ];

      break;
    }
    case 'L': {
      map = [
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, ],
        [ 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
      ];

      break;
    }
  }

  // fill empty rows
  map = mapHelper.getEmptyMap(20, map);

  return map;
}